#!/bin/bash
#set -e

ETCD_URL="http://127.0.0.1:4001"

###
service_name="memcached"
service_port=11211
exposed_base_port=11000
bind_addr=$(ifconfig eth0 | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1 }')

cmd="$1"
app="$2"
numbers_regex='^[0-9]+$'

link_name="$service_name"
container_name="${service_name}-${app}"
base_container_name="timchen/${service_name}"

# TODO swap return values
function does_service_for_app_exist() {
  _check_key=$(curl -L ${ETCD_URL}/v2/keys/apps/$app/$service_name 2> /dev/null)
  if [[ "$_check_key" =~ "Key not found" ]]; then
    return 0
  fi
  return 1
}

function set_service_key_for_app() {
  _key="$1"
  _value="$2"

  # TODO check json for return value
  curl -L ${ETCD_URL}/v2/keys/apps/${app}/${service_name}/${_key}?prevExist=false -X PUT -d value="$_value" 2> /dev/null
}

if [[ "$cmd" == $service_name:* ]] && [[ -z "$app" ]]; then
  echo "no app specified"
  exit 1
fi

app_id=$(curl -L ${ETCD_URL}/v2/keys/apps/$app/id  2> /dev/null | sed 's/^.*"value":"\([^"]*\)".*$/\1/')
if [[ ! "$app_id" =~ $numbers_regex ]]; then
  echo "unable to retrieve app id for $app"
  exit 1
fi

exposed_service_port=$((exposed_base_port+app_id))

case "$cmd" in
  memcached:create)
    does_service_for_app_exist
    ret=$?
    if [[ "$ret" -eq 1 ]]; then
      echo "${service_name} is already configured for ${app}!"
      curl -L ${ETCD_URL}/v2/keys/apps/$app/$service_name 2> /dev/null
      echo
      exit 1
    fi

    _image=$(docker images | grep "$base_container_name" | awk ' { print $3 }')
    if [[ -z "$_image" ]]; then
      echo "unable to find base image: $base_container_name" 
      exit 1
    fi

    # stop running container if exists
    _cid=$(docker ps | grep "$container_name" |  awk '{ print $1 }')
    if [[ ! -z "$_cid" ]]; then
      docker stop $_cid > /dev/null
    fi

    docker run -name="$container_name" -p "${bind_addr}:${exposed_service_port}:${service_port}" \
      -d "$base_container_name" \
        /usr/bin/memcached -u memcache -p 11211 -m 64 -l 0.0.0.0

    set_service_key_for_app "MEMCACHE_SERVERS" "${bind_addr}:${exposed_service_port}"

    echo "created ${service_name} container for ${app}!"
    #sleep 1
    #dokku memcached:info $app
    ;;

  memcached:delete)
    _cid=$(docker ps -a | grep "$container_name" | awk '{ print $1 }')
    if [[ ! -z "$_cid" ]]; then
      docker stop $_cid > /dev/null
      docker rm $_cid  > /dev/null
    fi

    #dokku link:delete "$app" "$container_name" "$link_name"
    #dokku config:unset "$app" MEMCACHE_SERVERS
    if [[ -z "$app" ]] || [[ -z "$service_name" ]]; then
      echo -e "critical error: \$app or \$service_name is empty!"
      exit 1
    fi
    # TODO don't actually delete...should mark disabled or something
    curl -L ${ETCD_URL}/v2/keys/apps/${app}/${service_name}?recursive=true -X DELETE &> /dev/null 

    echo "deleted ${service_name} container for ${app}!"
    ;;

  memcached:info)
    _cid=$(docker ps -a | grep "$container_name" | awk '{print $1}')
    _ip=$(docker inspect $_cid | grep IPAddress | cut -d '"' -f 4)
    echo "  >> host: ${_ip}:${service_port}"
    echo
    ;;

  memcached:logs)
    _cid=$(docker ps -a | grep "$container_name" |  awk '{ print $1 }')
    docker logs $_cid | tail -n 100
    ;;

  help)
    cat && cat<<EOF
    memcached:create <app>                          Create a Memcached container
    memcached:delete <app>                          Delete specified Memcached container
    memcached:info <app>                            Display container informations
    memcached:logs <app>                            Display last logs from Memcached container
EOF
    ;;

esac
